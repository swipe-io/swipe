//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
)

func LoadConfig() (cfg *Config, errs []error) {
	cfg = &Config{}
	fldDurationTmp, ok := os.LookupEnv("FLD_DURATION")
	if ok {
		fldDurationResult, err := time.ParseDuration(fldDurationTmp)
		if err != nil {
			errs = append(errs, err)
		}
		cfg.FldDuration = fldDurationResult
	}
	fldTimeTmp, ok := os.LookupEnv("FLD_TIME")
	if ok {
		fldTimeResult, err := time.Parse(time.RFC3339, fldTimeTmp)
		if err != nil {
			errs = append(errs, err)
		}
		cfg.FldTime = fldTimeResult
	}
	fldStringTmp, ok := os.LookupEnv("FLD_STRING")
	if ok {
		cfg.FldString = fldStringTmp
	}
	fldBoolTmp, ok := os.LookupEnv("FLD_BOOL")
	if ok {
		fldboolBool, err := strconv.ParseBool(fldBoolTmp)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_BOOL error: %w", err))
		}
		cfg.FldBool = bool(fldboolBool)
	}
	fldIntTmp, ok := os.LookupEnv("FLD_INT")
	if ok {
		fldintInt, err := strconv.Atoi(fldIntTmp)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_INT error: %w", err))
		}
		cfg.FldInt = int(fldintInt)
	}
	fldInt8Tmp, ok := os.LookupEnv("FLD_INT8")
	if ok {
		fldint8Int8, err := strconv.Atoi(fldInt8Tmp)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_INT8 error: %w", err))
		}
		cfg.FldInt8 = int8(fldint8Int8)
	}
	fldInt16Tmp, ok := os.LookupEnv("FLD_INT16")
	if ok {
		fldint16Int16, err := strconv.Atoi(fldInt16Tmp)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_INT16 error: %w", err))
		}
		cfg.FldInt16 = int16(fldint16Int16)
	}
	fldInt32Tmp, ok := os.LookupEnv("FLD_INT32")
	if ok {
		fldint32Int32, err := strconv.Atoi(fldInt32Tmp)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_INT32 error: %w", err))
		}
		cfg.FldInt32 = int32(fldint32Int32)
	}
	fldInt64Tmp, ok := os.LookupEnv("FLD_INT64")
	if ok {
		fldint64Int64, err := strconv.Atoi(fldInt64Tmp)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_INT64 error: %w", err))
		}
		cfg.FldInt64 = int64(fldint64Int64)
	}
	fldUIntTmp, ok := os.LookupEnv("FLD_U_INT")
	if ok {
		flduintUint, err := strconv.ParseUint(fldUIntTmp, 10, 64)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_U_INT error: %w", err))
		}
		cfg.FldUInt = uint(flduintUint)
	}
	fldUInt8Tmp, ok := os.LookupEnv("FLD_U_INT8")
	if ok {
		flduint8Uint8, err := strconv.ParseUint(fldUInt8Tmp, 10, 8)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_U_INT8 error: %w", err))
		}
		cfg.FldUInt8 = uint8(flduint8Uint8)
	}
	fldUInt16Tmp, ok := os.LookupEnv("FLD_U_INT16")
	if ok {
		flduint16Uint16, err := strconv.ParseUint(fldUInt16Tmp, 10, 16)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_U_INT16 error: %w", err))
		}
		cfg.FldUInt16 = uint16(flduint16Uint16)
	}
	fldUInt32Tmp, ok := os.LookupEnv("FLD_U_INT32")
	if ok {
		flduint32Uint32, err := strconv.ParseUint(fldUInt32Tmp, 10, 32)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_U_INT32 error: %w", err))
		}
		cfg.FldUInt32 = uint32(flduint32Uint32)
	}
	fldUInt64Tmp, ok := os.LookupEnv("FLD_U_INT64")
	if ok {
		flduint64Uint64, err := strconv.ParseUint(fldUInt64Tmp, 10, 64)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_U_INT64 error: %w", err))
		}
		cfg.FldUInt64 = uint64(flduint64Uint64)
	}
	fldFloat64Tmp, ok := os.LookupEnv("FLD_FLOAT64")
	if ok {
		fldfloat64Float64, err := strconv.ParseFloat(fldFloat64Tmp, 64)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_FLOAT64 error: %w", err))
		}
		cfg.FldFloat64 = float64(fldfloat64Float64)
	}
	fldFloat32Tmp, ok := os.LookupEnv("FLD_FLOAT32")
	if ok {
		fldfloat32Float32, err := strconv.ParseFloat(fldFloat32Tmp, 32)
		if err != nil {
			errs = append(errs, fmt.Errorf("convert FLD_FLOAT32 error: %w", err))
		}
		cfg.FldFloat32 = float32(fldfloat32Float32)
	}
	fldStringsTmp, ok := os.LookupEnv("FLD_STRINGS")
	if ok {
		cfg.FldStrings = strings.Split(fldStringsTmp, ",")
	}
	fldMapTmp, ok := os.LookupEnv("FLD_MAP")
	if ok {
		partsfldmap := strings.Split(fldMapTmp, ",")
		cfg.FldMap = make(map[string]string, len(partsfldmap))
		for _, s := range partsfldmap {
			kv := strings.Split(s, "=")
			if len(kv) == 2 {
				cfg.FldMap[kv[0]] = kv[1]
			}
		}
	}
	iD3VerTmp, ok := os.LookupEnv("ID3_VER")
	if ok {
		cfg.ID3Ver = iD3VerTmp
	}
	testNumber123Tmp, ok := os.LookupEnv("TEST_NUMBER123")
	if ok {
		cfg.TestNumber123 = testNumber123Tmp
	}
	return
}

func (cfg *Config) String() string {
	out := `
FLD_DURATION=` + fmt.Sprintf("%v", cfg.FldDuration) + ` ; Test duration required description
FLD_TIME=` + fmt.Sprintf("%v", cfg.FldTime) + ` ; Test time required description
FLD_STRING=` + fmt.Sprintf("%v", cfg.FldString) + ` ; Test string required description
FLD_BOOL=` + fmt.Sprintf("%v", cfg.FldBool) + ` ; Test bool required description
FLD_INT=` + fmt.Sprintf("%v", cfg.FldInt) + ` ; Test int required description
FLD_INT8=` + fmt.Sprintf("%v", cfg.FldInt8) + ` ; Test int8 required description
FLD_INT16=` + fmt.Sprintf("%v", cfg.FldInt16) + ` ; Test int16 required description
FLD_INT32=` + fmt.Sprintf("%v", cfg.FldInt32) + ` ; Test int32 required description
FLD_INT64=` + fmt.Sprintf("%v", cfg.FldInt64) + ` ; Test int64 required description
FLD_U_INT=` + fmt.Sprintf("%v", cfg.FldUInt) + ` ; Test uint required description
FLD_U_INT8=` + fmt.Sprintf("%v", cfg.FldUInt8) + ` ; Test uint8 required description
FLD_U_INT16=` + fmt.Sprintf("%v", cfg.FldUInt16) + ` ; Test uint16 required description
FLD_U_INT32=` + fmt.Sprintf("%v", cfg.FldUInt32) + ` ; Test uint32 required description
FLD_U_INT64=` + fmt.Sprintf("%v", cfg.FldUInt64) + ` ; Test uint64 required description
FLD_FLOAT64=` + fmt.Sprintf("%v", cfg.FldFloat64) + ` ; Test int required description
FLD_FLOAT32=` + fmt.Sprintf("%v", cfg.FldFloat32) + ` ; Test int required description
FLD_STRINGS=` + fmt.Sprintf("%v", cfg.FldStrings) + ` ; Test []string required description
FLD_MAP=` + fmt.Sprintf("%v", cfg.FldMap) + ` ; Test map[string]string required description
ID3_VER=` + fmt.Sprintf("%v", cfg.ID3Ver) + ` ; Test number env name required description
TEST_NUMBER123=` + fmt.Sprintf("%v", cfg.TestNumber123) + ` ; Test number env name required description
`
	return out
}
