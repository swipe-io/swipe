//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net"
	http2 "net/http"
	"net/url"
	"strings"

	"github.com/go-kit/kit/transport/http"
	"github.com/pquerna/ffjson/ffjson"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app1"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app2"
)

func NewClientRESTApp(tgt string, options ...ClientOption) (app1.App, error) {
	opts := &clientOpts{}
	c := &clientApp{}
	for _, o := range options {
		o(opts)
	}
	if strings.HasPrefix(tgt, "[") {
		host, port, err := net.SplitHostPort(tgt)
		if err != nil {
			return nil, err
		}
		tgt = host + ":" + port
	}
	u, err := url.Parse(tgt)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		u.Scheme = "https"
	}
	c.createEndpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(AppCreateRequest)
			if !ok {
				return fmt.Errorf("couldn't assert request as AppCreateRequest, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/app1/create"
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, appCreateErrorDecode(statusCode)
			}
			return nil, nil
		},
		append(opts.genericClientOption, opts.appCreateClientOption...)...,
	).Endpoint()
	c.createEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.appCreateEndpointMiddleware...))(c.createEndpoint)
	return c, nil
}

func NewClientRESTApp(tgt string, options ...ClientOption) (app2.App, error) {
	opts := &clientOpts{}
	c := &clientApp{}
	for _, o := range options {
		o(opts)
	}
	if strings.HasPrefix(tgt, "[") {
		host, port, err := net.SplitHostPort(tgt)
		if err != nil {
			return nil, err
		}
		tgt = host + ":" + port
	}
	u, err := url.Parse(tgt)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		u.Scheme = "https"
	}
	c.createEndpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(AppCreateRequest)
			if !ok {
				return fmt.Errorf("couldn't assert request as AppCreateRequest, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/app2/create"
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, appCreateErrorDecode(statusCode)
			}
			return nil, nil
		},
		append(opts.genericClientOption, opts.appCreateClientOption...)...,
	).Endpoint()
	c.createEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.appCreateEndpointMiddleware...))(c.createEndpoint)
	return c, nil
}
