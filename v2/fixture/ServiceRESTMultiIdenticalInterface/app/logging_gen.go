//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"
	"time"

	"github.com/go-kit/kit/log"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app1"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app2"
)

type App1LoggingMiddleware struct {
	next   app1.App
	logger log.Logger
}

func (s *App1LoggingMiddleware) Create(ctx context.Context, name string, data []byte) error {
	var (
		err error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "Create", "took", time.Since(now), "name", name, "data", len(data), "123", ctx.Value("123"), "err", logErr)
	}(time.Now())
	err = s.next.Create(ctx, name, data)
	return err
}

func NewLoggingApp1Middleware(s app1.App, logger log.Logger) app1.App {
	return &App1LoggingMiddleware{next: s, logger: logger}
}

type App2LoggingMiddleware struct {
	next   app2.App
	logger log.Logger
}

func (s *App2LoggingMiddleware) Create(ctx context.Context, name string, data []byte) error {
	var (
		err error
	)
	defer func(now time.Time) {
		logErr := err
		if le, ok := err.(interface{ LogError() error }); ok {
			logErr = le.LogError()
		}
		s.logger.Log("method", "Create", "took", time.Since(now), "name", name, "data", len(data), "123", ctx.Value("123"), "err", logErr)
	}(time.Now())
	err = s.next.Create(ctx, name, data)
	return err
}

func NewLoggingApp2Middleware(s app2.App, logger log.Logger) app2.App {
	return &App2LoggingMiddleware{next: s, logger: logger}
}
