//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/transport/http"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app1"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app2"
)

type AppClient struct {
	App1Client app1.App
	App2Client app2.App
}

func NewClientREST(tgt string, opts ...ClientOption) (*AppClient, error) {
	appClient, err := NewClientRESTApp(tgt, opts...)
	if err != nil {
		return nil, err
	}
	appClient, err := NewClientRESTApp(tgt, opts...)
	if err != nil {
		return nil, err
	}
	return &AppClient{
		App1Client: appClient,
		App2Client: appClient,
	}, nil
}

type ClientOption func(*clientOpts)
type clientOpts struct {
	appCreateClientOption       []http.ClientOption
	appCreateEndpointMiddleware []endpoint.Middleware
	appCreateClientOption       []http.ClientOption
	appCreateEndpointMiddleware []endpoint.Middleware
	genericClientOption         []http.ClientOption
	genericEndpointMiddleware   []endpoint.Middleware
}

func GenericClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.genericClientOption = opt }
}

func GenericClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.genericEndpointMiddleware = opt }
}

func AppCreateClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appCreateClientOption = opt }
}

func AppCreateClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appCreateEndpointMiddleware = opt }
}

func AppCreateClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appCreateClientOption = opt }
}

func AppCreateClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appCreateEndpointMiddleware = opt }
}

type clientApp struct {
	createEndpoint endpoint.Endpoint
}

func (c *clientApp) Create(ctx context.Context, name string, data []byte) error {
	_, err := c.createEndpoint(ctx, AppCreateRequest{Name: name, Data: data})
	if err != nil {
		return err
	}
	return nil
}

type clientApp struct {
	createEndpoint endpoint.Endpoint
}

func (c *clientApp) Create(ctx context.Context, name string, data []byte) error {
	_, err := c.createEndpoint(ctx, AppCreateRequest{Name: name, Data: data})
	if err != nil {
		return err
	}
	return nil
}
