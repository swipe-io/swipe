//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/transport/http"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app1"
	"github.com/swipe-io/swipe/v2/fixture/ServiceRESTMultiIdenticalInterface/app/controller/app2"
)

type AppClient struct {
	App1Client app1.App
	App2Client app2.App
}

func NewClientREST(tgt string, opts ...ClientOption) (*AppClient, error) {
	app1Client, err := NewClientRESTApp1(tgt, opts...)
	if err != nil {
		return nil, err
	}
	app2Client, err := NewClientRESTApp2(tgt, opts...)
	if err != nil {
		return nil, err
	}
	return &AppClient{
		App1Client: app1Client,
		App2Client: app2Client,
	}, nil
}

type ClientOption func(*clientOpts)
type clientOpts struct {
	app1CreateClientOption       []http.ClientOption
	app1CreateEndpointMiddleware []endpoint.Middleware
	app2CreateClientOption       []http.ClientOption
	app2CreateEndpointMiddleware []endpoint.Middleware
	genericClientOption          []http.ClientOption
	genericEndpointMiddleware    []endpoint.Middleware
}

func GenericClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.genericClientOption = opt }
}

func GenericClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.genericEndpointMiddleware = opt }
}

func App1CreateClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.app1CreateClientOption = opt }
}

func App1CreateClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.app1CreateEndpointMiddleware = opt }
}

func App2CreateClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.app2CreateClientOption = opt }
}

func App2CreateClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.app2CreateEndpointMiddleware = opt }
}

type clientApp1 struct {
	app1CreateEndpoint endpoint.Endpoint
}

func (c *clientApp1) Create(ctx context.Context, name string, data []byte) error {
	_, err := c.app1CreateEndpoint(ctx, App1CreateCreateRequest{Name: name, Data: data})
	if err != nil {
		return err
	}
	return nil
}

type clientApp2 struct {
	app2CreateEndpoint endpoint.Endpoint
}

func (c *clientApp2) Create(ctx context.Context, name string, data []byte) error {
	_, err := c.app2CreateEndpoint(ctx, App2CreateCreateRequest{Name: name, Data: data})
	if err != nil {
		return err
	}
	return nil
}
