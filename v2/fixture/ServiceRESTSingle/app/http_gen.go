//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	http2 "net/http"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/transport/http"
)

type httpError struct {
	code int
}

func (e *httpError) Error() string {
	return http2.StatusText(e.code)
}
func (e *httpError) StatusCode() int {
	return e.code
}
func appInterfaceCreateErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func appInterfaceDeleteErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func appInterfaceGetErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func appInterfaceGetAllErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func appInterfaceStartErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func appInterfaceTestMethodErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func appInterfaceTestMethod2ErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func appInterfaceTestMethodOptionalsErrorDecode(code int) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	return
}

func middlewareChain(middlewares []endpoint.Middleware) endpoint.Middleware {
	return func(next endpoint.Endpoint) endpoint.Endpoint {
		if len(middlewares) == 0 {
			return next
		}
		outer := middlewares[0]
		others := middlewares[1:]
		for i := len(others) - 1; i >= 0; i-- {
			next = others[i](next)
		}
		return outer(next)
	}
}
func GenericServerOptions(v ...http.ServerOption) ServerOption {
	return func(o *serverOpts) { o.genericServerOption = v }
}

func GenericServerEndpointMiddlewares(v ...endpoint.Middleware) ServerOption {
	return func(o *serverOpts) { o.genericEndpointMiddleware = v }
}

type ServerOption func(*serverOpts)
type serverOpts struct {
	genericServerOption                               []http.ServerOption
	genericEndpointMiddleware                         []endpoint.Middleware
	appInterfaceCreateServerOption                    []http.ServerOption
	appInterfaceCreateEndpointMiddleware              []endpoint.Middleware
	appInterfaceDeleteServerOption                    []http.ServerOption
	appInterfaceDeleteEndpointMiddleware              []endpoint.Middleware
	appInterfaceGetServerOption                       []http.ServerOption
	appInterfaceGetEndpointMiddleware                 []endpoint.Middleware
	appInterfaceGetAllServerOption                    []http.ServerOption
	appInterfaceGetAllEndpointMiddleware              []endpoint.Middleware
	appInterfaceStartServerOption                     []http.ServerOption
	appInterfaceStartEndpointMiddleware               []endpoint.Middleware
	appInterfaceTestMethodServerOption                []http.ServerOption
	appInterfaceTestMethodEndpointMiddleware          []endpoint.Middleware
	appInterfaceTestMethod2ServerOption               []http.ServerOption
	appInterfaceTestMethod2EndpointMiddleware         []endpoint.Middleware
	appInterfaceTestMethodOptionalsServerOption       []http.ServerOption
	appInterfaceTestMethodOptionalsEndpointMiddleware []endpoint.Middleware
}

func AppInterfaceCreateServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceCreateServerOption = opt }
}

func AppInterfaceCreateServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceCreateEndpointMiddleware = opt }
}

func AppInterfaceDeleteServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceDeleteServerOption = opt }
}

func AppInterfaceDeleteServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceDeleteEndpointMiddleware = opt }
}

func AppInterfaceGetServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceGetServerOption = opt }
}

func AppInterfaceGetServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceGetEndpointMiddleware = opt }
}

func AppInterfaceGetAllServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceGetAllServerOption = opt }
}

func AppInterfaceGetAllServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceGetAllEndpointMiddleware = opt }
}

func AppInterfaceStartServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceStartServerOption = opt }
}

func AppInterfaceStartServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceStartEndpointMiddleware = opt }
}

func AppInterfaceTestMethodServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceTestMethodServerOption = opt }
}

func AppInterfaceTestMethodServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceTestMethodEndpointMiddleware = opt }
}

func AppInterfaceTestMethod2ServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceTestMethod2ServerOption = opt }
}

func AppInterfaceTestMethod2ServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceTestMethod2EndpointMiddleware = opt }
}

func AppInterfaceTestMethodOptionalsServerOptions(opt ...http.ServerOption) ServerOption {
	return func(c *serverOpts) { c.appInterfaceTestMethodOptionalsServerOption = opt }
}

func AppInterfaceTestMethodOptionalsServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.appInterfaceTestMethodOptionalsEndpointMiddleware = opt }
}
