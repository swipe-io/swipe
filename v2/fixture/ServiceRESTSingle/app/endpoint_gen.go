//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"
	"time"

	"github.com/go-kit/kit/endpoint"
)

func MakeAppInterfaceCreateEndpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CreateRequest)
		err := s.Create(ctx, req.NewData, req.Name, req.Data, req.Date)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}

}

func MakeAppInterfaceDeleteEndpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteRequest)
		a, b, err := s.Delete(ctx, req.Id)
		if err != nil {
			return nil, err
		}
		return DeleteResponse{A: a, B: b}, nil
	}

}

func MakeAppInterfaceGetEndpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetRequest)
		result, err := s.Get(ctx, req.Id, req.Name, req.Fname, req.Price, req.N, req.B, req.Cc)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func MakeAppInterfaceGetAllEndpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetAllRequest)
		result, err := s.GetAll(ctx, req.Members)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func MakeAppInterfaceStartEndpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		err := s.Start(ctx)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}

}

func MakeAppInterfaceTestMethodEndpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(TestMethodRequest)
		result, err := s.TestMethod(req.Data, req.Ss)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func MakeAppInterfaceTestMethod2Endpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(TestMethod2Request)
		err := s.TestMethod2(ctx, req.Ns, req.Utype, req.User, req.Restype, req.Resource, req.Permission)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}

}

func MakeAppInterfaceTestMethodOptionalsEndpoint(s AppInterface) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(TestMethodOptionalsRequest)
		err := s.TestMethodOptionals(ctx, req.Ns, req.Options...)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}

}

type AppInterfaceEndpointSet struct {
	CreateEndpoint              endpoint.Endpoint
	DeleteEndpoint              endpoint.Endpoint
	GetEndpoint                 endpoint.Endpoint
	GetAllEndpoint              endpoint.Endpoint
	StartEndpoint               endpoint.Endpoint
	TestMethodEndpoint          endpoint.Endpoint
	TestMethod2Endpoint         endpoint.Endpoint
	TestMethodOptionalsEndpoint endpoint.Endpoint
}

func MakeAppInterfaceEndpointSet(svc AppInterface) AppInterfaceEndpointSet {
	return AppInterfaceEndpointSet{
		CreateEndpoint:              MakeAppInterfaceCreateEndpoint(svc),
		DeleteEndpoint:              MakeAppInterfaceDeleteEndpoint(svc),
		GetEndpoint:                 MakeAppInterfaceGetEndpoint(svc),
		GetAllEndpoint:              MakeAppInterfaceGetAllEndpoint(svc),
		StartEndpoint:               MakeAppInterfaceStartEndpoint(svc),
		TestMethodEndpoint:          MakeAppInterfaceTestMethodEndpoint(svc),
		TestMethod2Endpoint:         MakeAppInterfaceTestMethod2Endpoint(svc),
		TestMethodOptionalsEndpoint: MakeAppInterfaceTestMethodOptionalsEndpoint(svc),
	}
}

type CreateRequest struct {
	NewData Data      `json:"newData"`
	Name    string    `json:"name"`
	Data    []byte    `json:"data"`
	Date    time.Time `json:"date"`
}
type DeleteRequest struct {
	Id uint `json:"id"`
}
type DeleteResponse struct {
	A string `json:"a"`
	B string `json:"b"`
}
type GetRequest struct {
	Id    int     `json:"id"`
	Name  string  `json:"name"`
	Fname string  `json:"fname"`
	Price float32 `json:"price"`
	N     int     `json:"n"`
	B     int     `json:"b"`
	Cc    int     `json:"cc"`
}
type GetAllRequest struct {
	Members Members `json:"members"`
}
type TestMethodRequest struct {
	Data map[string]interface{} `json:"data"`
	Ss   interface{}            `json:"ss"`
}
type TestMethod2Request struct {
	Ns         string `json:"ns"`
	Utype      string `json:"utype"`
	User       string `json:"user"`
	Restype    string `json:"restype"`
	Resource   string `json:"resource"`
	Permission string `json:"permission"`
}
type TestMethodOptionalsRequest struct {
	Ns      string   `json:"ns"`
	Options []Option `json:"options"`
}
