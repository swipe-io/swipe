//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/transport/http"
)

type ClientOption func(*clientOpts)
type clientOpts struct {
	appInterfaceCreateClientOption                    []http.ClientOption
	appInterfaceCreateEndpointMiddleware              []endpoint.Middleware
	appInterfaceDeleteClientOption                    []http.ClientOption
	appInterfaceDeleteEndpointMiddleware              []endpoint.Middleware
	appInterfaceGetClientOption                       []http.ClientOption
	appInterfaceGetEndpointMiddleware                 []endpoint.Middleware
	appInterfaceGetAllClientOption                    []http.ClientOption
	appInterfaceGetAllEndpointMiddleware              []endpoint.Middleware
	appInterfaceStartClientOption                     []http.ClientOption
	appInterfaceStartEndpointMiddleware               []endpoint.Middleware
	appInterfaceTestMethodClientOption                []http.ClientOption
	appInterfaceTestMethodEndpointMiddleware          []endpoint.Middleware
	appInterfaceTestMethod2ClientOption               []http.ClientOption
	appInterfaceTestMethod2EndpointMiddleware         []endpoint.Middleware
	appInterfaceTestMethodOptionalsClientOption       []http.ClientOption
	appInterfaceTestMethodOptionalsEndpointMiddleware []endpoint.Middleware
	genericClientOption                               []http.ClientOption
	genericEndpointMiddleware                         []endpoint.Middleware
}

func GenericClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.genericClientOption = opt }
}

func GenericClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.genericEndpointMiddleware = opt }
}

func AppInterfaceCreateClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceCreateClientOption = opt }
}

func AppInterfaceCreateClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceCreateEndpointMiddleware = opt }
}

func AppInterfaceDeleteClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceDeleteClientOption = opt }
}

func AppInterfaceDeleteClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceDeleteEndpointMiddleware = opt }
}

func AppInterfaceGetClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceGetClientOption = opt }
}

func AppInterfaceGetClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceGetEndpointMiddleware = opt }
}

func AppInterfaceGetAllClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceGetAllClientOption = opt }
}

func AppInterfaceGetAllClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceGetAllEndpointMiddleware = opt }
}

func AppInterfaceStartClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceStartClientOption = opt }
}

func AppInterfaceStartClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceStartEndpointMiddleware = opt }
}

func AppInterfaceTestMethodClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceTestMethodClientOption = opt }
}

func AppInterfaceTestMethodClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceTestMethodEndpointMiddleware = opt }
}

func AppInterfaceTestMethod2ClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceTestMethod2ClientOption = opt }
}

func AppInterfaceTestMethod2ClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceTestMethod2EndpointMiddleware = opt }
}

func AppInterfaceTestMethodOptionalsClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.appInterfaceTestMethodOptionalsClientOption = opt }
}

func AppInterfaceTestMethodOptionalsClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.appInterfaceTestMethodOptionalsEndpointMiddleware = opt }
}

type clientAppInterface struct {
	appInterfaceCreateEndpoint              endpoint.Endpoint
	appInterfaceDeleteEndpoint              endpoint.Endpoint
	appInterfaceGetEndpoint                 endpoint.Endpoint
	appInterfaceGetAllEndpoint              endpoint.Endpoint
	appInterfaceStartEndpoint               endpoint.Endpoint
	appInterfaceTestMethodEndpoint          endpoint.Endpoint
	appInterfaceTestMethod2Endpoint         endpoint.Endpoint
	appInterfaceTestMethodOptionalsEndpoint endpoint.Endpoint
}

func (c *clientAppInterface) Create(ctx context.Context, newData Data, name string, data []byte, date time.Time) error {
	_, err := c.appInterfaceCreateEndpoint(ctx, CreateRequest{NewData: newData, Name: name, Data: data, Date: date})
	if err != nil {
		return err
	}
	return nil
}

func (c *clientAppInterface) Delete(ctx context.Context, id uint) (string, string, error) {
	resp, err := c.appInterfaceDeleteEndpoint(ctx, DeleteRequest{Id: id})
	if err != nil {
		return "", "", err
	}
	response := resp.(DeleteResponse)
	return response.A, response.B, nil
}

func (c *clientAppInterface) Get(ctx context.Context, id int, name string, fname string, price float32, n int, b int, cc int) (User, error) {
	resp, err := c.appInterfaceGetEndpoint(ctx, GetRequest{Id: id, Name: name, Fname: fname, Price: price, N: n, B: b, Cc: cc})
	if err != nil {
		return User{}, err
	}
	response := resp.(User)
	return response, nil
}

func (c *clientAppInterface) GetAll(ctx context.Context, members Members) ([]*User, error) {
	resp, err := c.appInterfaceGetAllEndpoint(ctx, GetAllRequest{Members: members})
	if err != nil {
		return nil, err
	}
	response := resp.([]*User)
	return response, nil
}

func (c *clientAppInterface) Start(ctx context.Context) error {
	_, err := c.appInterfaceStartEndpoint(ctx, nil)
	if err != nil {
		return err
	}
	return nil
}

func (c *clientAppInterface) TestMethod(data map[string]interface{}, ss interface{}) (map[string]map[int][]string, error) {
	resp, err := c.appInterfaceTestMethodEndpoint(context.Background(), TestMethodRequest{Data: data, Ss: ss})
	if err != nil {
		return nil, err
	}
	response := resp.(map[string]map[int][]string)
	return response, nil
}

func (c *clientAppInterface) TestMethod2(ctx context.Context, ns string, utype string, user string, restype string, resource string, permission string) error {
	_, err := c.appInterfaceTestMethod2Endpoint(ctx, TestMethod2Request{Ns: ns, Utype: utype, User: user, Restype: restype, Resource: resource, Permission: permission})
	if err != nil {
		return err
	}
	return nil
}

func (c *clientAppInterface) TestMethodOptionals(ctx context.Context, ns string, options ...Option) error {
	_, err := c.appInterfaceTestMethodOptionalsEndpoint(ctx, TestMethodOptionalsRequest{Ns: ns, Options: options})
	if err != nil {
		return err
	}
	return nil
}
