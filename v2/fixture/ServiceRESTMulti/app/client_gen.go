//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net"
	http2 "net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/go-kit/kit/transport/http"
	"github.com/pquerna/ffjson/ffjson"
)

func NewClientRESTInterfaceA(tgt string, options ...ClientOption) (InterfaceA, error) {
	opts := &clientOpts{}
	c := &clientInterfaceA{}
	for _, o := range options {
		o(opts)
	}
	if strings.HasPrefix(tgt, "[") {
		host, port, err := net.SplitHostPort(tgt)
		if err != nil {
			return nil, err
		}
		tgt = host + ":" + port
	}
	u, err := url.Parse(tgt)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		u.Scheme = "https"
	}
	c.testMethodEndpoint = http.NewClient(
		"GET",
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			r.Method = "GET"
			r.URL.Path += "/a/testMethod"
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, interfaceATestMethodErrorDecode(statusCode)
			}
			return nil, nil
		},
		append(opts.genericClientOption, opts.interfaceATestMethodClientOption...)...,
	).Endpoint()
	c.testMethodEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.interfaceATestMethodEndpointMiddleware...))(c.testMethodEndpoint)
	return c, nil
}

func NewClientRESTInterfaceB(tgt string, options ...ClientOption) (InterfaceB, error) {
	opts := &clientOpts{}
	c := &clientInterfaceB{}
	for _, o := range options {
		o(opts)
	}
	if strings.HasPrefix(tgt, "[") {
		host, port, err := net.SplitHostPort(tgt)
		if err != nil {
			return nil, err
		}
		tgt = host + ":" + port
	}
	u, err := url.Parse(tgt)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		u.Scheme = "https"
	}
	c.createEndpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(InterfaceBCreateRequest)
			if !ok {
				return fmt.Errorf("couldn't assert request as InterfaceBCreateRequest, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/b/create"
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, interfaceBCreateErrorDecode(statusCode)
			}
			return nil, nil
		},
		append(opts.genericClientOption, opts.interfaceBCreateClientOption...)...,
	).Endpoint()
	c.createEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.interfaceBCreateEndpointMiddleware...))(c.createEndpoint)
	c.deleteEndpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(InterfaceBDeleteRequest)
			if !ok {
				return fmt.Errorf("couldn't assert request as InterfaceBDeleteRequest, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/b/delete"
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, interfaceBDeleteErrorDecode(statusCode)
			}
			var resp InterfaceBDeleteRequest
			b, err := ioutil.ReadAll(r.Body)
			if err != nil {
				return nil, err
			}
			err = ffjson.Unmarshal(b, &resp)
			if err != nil && err != io.EOF {
				return nil, fmt.Errorf("couldn't unmarshal body to InterfaceBDeleteRequest: %s", err)
			}
			return resp, nil
		},
		append(opts.genericClientOption, opts.interfaceBDeleteClientOption...)...,
	).Endpoint()
	c.deleteEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.interfaceBDeleteEndpointMiddleware...))(c.deleteEndpoint)
	c.getEndpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(InterfaceBGetRequest)
			if !ok {
				return fmt.Errorf("couldn't assert request as InterfaceBGetRequest, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/b/get-test"
			q := r.URL.Query()
			ccStr := strconv.FormatInt(int64(req.Cc), 10)
			q.Add("cc", ccStr)
			r.URL.RawQuery = q.Encode()
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, interfaceBGetErrorDecode(statusCode)
			}
			var resp User
			b, err := ioutil.ReadAll(r.Body)
			if err != nil {
				return nil, err
			}
			err = ffjson.Unmarshal(b, &resp)
			if err != nil && err != io.EOF {
				return nil, fmt.Errorf("couldn't unmarshal body to InterfaceBGetRequest: %s", err)
			}
			return resp, nil
		},
		append(opts.genericClientOption, opts.interfaceBGetClientOption...)...,
	).Endpoint()
	c.getEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.interfaceBGetEndpointMiddleware...))(c.getEndpoint)
	c.getAllEndpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(InterfaceBGetAllRequest)
			if !ok {
				return fmt.Errorf("couldn't assert request as InterfaceBGetAllRequest, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/b/getAll"
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, interfaceBGetAllErrorDecode(statusCode)
			}
			var resp []*User
			b, err := ioutil.ReadAll(r.Body)
			if err != nil {
				return nil, err
			}
			err = ffjson.Unmarshal(b, &resp)
			if err != nil && err != io.EOF {
				return nil, fmt.Errorf("couldn't unmarshal body to InterfaceBGetAllRequest: %s", err)
			}
			return resp, nil
		},
		append(opts.genericClientOption, opts.interfaceBGetAllClientOption...)...,
	).Endpoint()
	c.getAllEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.interfaceBGetAllEndpointMiddleware...))(c.getAllEndpoint)
	c.testMethodEndpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(InterfaceBTestMethodRequest)
			if !ok {
				return fmt.Errorf("couldn't assert request as InterfaceBTestMethodRequest, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/b/testMethod"
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, interfaceBTestMethodErrorDecode(statusCode)
			}
			var resp map[string]map[int][]string
			b, err := ioutil.ReadAll(r.Body)
			if err != nil {
				return nil, err
			}
			err = ffjson.Unmarshal(b, &resp)
			if err != nil && err != io.EOF {
				return nil, fmt.Errorf("couldn't unmarshal body to InterfaceBTestMethodRequest: %s", err)
			}
			return resp, nil
		},
		append(opts.genericClientOption, opts.interfaceBTestMethodClientOption...)...,
	).Endpoint()
	c.testMethodEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.interfaceBTestMethodEndpointMiddleware...))(c.testMethodEndpoint)
	c.testMethod2Endpoint = http.NewClient(
		http2.MethodPost,
		u,
		func(_ context.Context, r *http2.Request, request interface{}) error {
			req, ok := request.(InterfaceBTestMethod2Request)
			if !ok {
				return fmt.Errorf("couldn't assert request as InterfaceBTestMethod2Request, got %T", request)
			}
			r.Method = http2.MethodPost
			r.URL.Path += "/b/testMethod2"
			data, err := ffjson.Marshal(req)
			if err != nil {
				return fmt.Errorf("couldn't marshal request %T: %s", req, err)
			}
			r.Body = ioutil.NopCloser(bytes.NewBuffer(data))
			return nil
		},
		func(_ context.Context, r *http2.Response) (interface{}, error) {
			if statusCode := r.StatusCode; statusCode != http2.StatusOK {
				return nil, interfaceBTestMethod2ErrorDecode(statusCode)
			}
			return nil, nil
		},
		append(opts.genericClientOption, opts.interfaceBTestMethod2ClientOption...)...,
	).Endpoint()
	c.testMethod2Endpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.interfaceBTestMethod2EndpointMiddleware...))(c.testMethod2Endpoint)
	return c, nil
}
