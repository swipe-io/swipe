//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/transport/http"
)

type AppClient struct {
	AClient InterfaceA
	BClient InterfaceB
}

func NewClientREST(tgt string, opts ...ClientOption) (*AppClient, error) {
	interfaceAClient, err := NewClientRESTInterfaceA(tgt, opts...)
	if err != nil {
		return nil, err
	}
	interfaceBClient, err := NewClientRESTInterfaceB(tgt, opts...)
	if err != nil {
		return nil, err
	}
	return &AppClient{
		AClient: interfaceAClient,
		BClient: interfaceBClient,
	}, nil
}

type ClientOption func(*clientOpts)
type clientOpts struct {
	interfaceATestMethodClientOption        []http.ClientOption
	interfaceATestMethodEndpointMiddleware  []endpoint.Middleware
	interfaceBCreateClientOption            []http.ClientOption
	interfaceBCreateEndpointMiddleware      []endpoint.Middleware
	interfaceBDeleteClientOption            []http.ClientOption
	interfaceBDeleteEndpointMiddleware      []endpoint.Middleware
	interfaceBGetClientOption               []http.ClientOption
	interfaceBGetEndpointMiddleware         []endpoint.Middleware
	interfaceBGetAllClientOption            []http.ClientOption
	interfaceBGetAllEndpointMiddleware      []endpoint.Middleware
	interfaceBTestMethodClientOption        []http.ClientOption
	interfaceBTestMethodEndpointMiddleware  []endpoint.Middleware
	interfaceBTestMethod2ClientOption       []http.ClientOption
	interfaceBTestMethod2EndpointMiddleware []endpoint.Middleware
	genericClientOption                     []http.ClientOption
	genericEndpointMiddleware               []endpoint.Middleware
}

func GenericClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.genericClientOption = opt }
}

func GenericClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.genericEndpointMiddleware = opt }
}

func InterfaceATestMethodClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.interfaceATestMethodClientOption = opt }
}

func InterfaceATestMethodClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.interfaceATestMethodEndpointMiddleware = opt }
}

func InterfaceBCreateClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.interfaceBCreateClientOption = opt }
}

func InterfaceBCreateClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.interfaceBCreateEndpointMiddleware = opt }
}

func InterfaceBDeleteClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.interfaceBDeleteClientOption = opt }
}

func InterfaceBDeleteClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.interfaceBDeleteEndpointMiddleware = opt }
}

func InterfaceBGetClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.interfaceBGetClientOption = opt }
}

func InterfaceBGetClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.interfaceBGetEndpointMiddleware = opt }
}

func InterfaceBGetAllClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.interfaceBGetAllClientOption = opt }
}

func InterfaceBGetAllClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.interfaceBGetAllEndpointMiddleware = opt }
}

func InterfaceBTestMethodClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.interfaceBTestMethodClientOption = opt }
}

func InterfaceBTestMethodClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.interfaceBTestMethodEndpointMiddleware = opt }
}

func InterfaceBTestMethod2ClientOptions(opt ...http.ClientOption) ClientOption {
	return func(c *clientOpts) { c.interfaceBTestMethod2ClientOption = opt }
}

func InterfaceBTestMethod2ClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.interfaceBTestMethod2EndpointMiddleware = opt }
}

type clientInterfaceA struct {
	testMethodEndpoint endpoint.Endpoint
}

func (c *clientInterfaceA) TestMethod() {
	_, _ = c.testMethodEndpoint(context.Background(), nil)
	return
}

type clientInterfaceB struct {
	createEndpoint      endpoint.Endpoint
	deleteEndpoint      endpoint.Endpoint
	getEndpoint         endpoint.Endpoint
	getAllEndpoint      endpoint.Endpoint
	testMethodEndpoint  endpoint.Endpoint
	testMethod2Endpoint endpoint.Endpoint
}

func (c *clientInterfaceB) Create(ctx context.Context, newData Data, name string, data []byte) error {
	_, err := c.createEndpoint(ctx, InterfaceBCreateRequest{NewData: newData, Name: name, Data: data})
	if err != nil {
		return err
	}
	return nil
}

func (c *clientInterfaceB) Delete(ctx context.Context, id uint) (string, string, error) {
	resp, err := c.deleteEndpoint(ctx, InterfaceBDeleteRequest{Id: id})
	if err != nil {
		return "", "", err
	}
	response := resp.(InterfaceBDeleteResponse)
	return response.A, response.B, nil
}

func (c *clientInterfaceB) Get(ctx context.Context, id int, name string, fname string, price float32, n int, b int, cc int) (User, error) {
	resp, err := c.getEndpoint(ctx, InterfaceBGetRequest{Id: id, Name: name, Fname: fname, Price: price, N: n, B: b, Cc: cc})
	if err != nil {
		return User{}, err
	}
	response := resp.(User)
	return response, nil
}

func (c *clientInterfaceB) GetAll(ctx context.Context, members Members) ([]*User, error) {
	resp, err := c.getAllEndpoint(ctx, InterfaceBGetAllRequest{Members: members})
	if err != nil {
		return nil, err
	}
	response := resp.([]*User)
	return response, nil
}

func (c *clientInterfaceB) TestMethod(data map[string]interface{}, ss interface{}) (map[string]map[int][]string, error) {
	resp, err := c.testMethodEndpoint(context.Background(), InterfaceBTestMethodRequest{Data: data, Ss: ss})
	if err != nil {
		return nil, err
	}
	response := resp.(map[string]map[int][]string)
	return response, nil
}

func (c *clientInterfaceB) TestMethod2(ctx context.Context, ns string, utype string, user string, restype string, resource string, permission string) error {
	_, err := c.testMethod2Endpoint(ctx, InterfaceBTestMethod2Request{Ns: ns, Utype: utype, User: user, Restype: restype, Resource: resource, Permission: permission})
	if err != nil {
		return err
	}
	return nil
}
