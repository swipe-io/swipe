//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"github.com/google/uuid"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
)

type ClientOption func(*clientOpts)
type clientOpts struct {
	serviceCreateClientOption                    []jsonrpc.ClientOption
	serviceCreateEndpointMiddleware              []endpoint.Middleware
	serviceDeleteClientOption                    []jsonrpc.ClientOption
	serviceDeleteEndpointMiddleware              []endpoint.Middleware
	serviceGetClientOption                       []jsonrpc.ClientOption
	serviceGetEndpointMiddleware                 []endpoint.Middleware
	serviceGetAllClientOption                    []jsonrpc.ClientOption
	serviceGetAllEndpointMiddleware              []endpoint.Middleware
	serviceTestMethodClientOption                []jsonrpc.ClientOption
	serviceTestMethodEndpointMiddleware          []endpoint.Middleware
	serviceTestMethod2ClientOption               []jsonrpc.ClientOption
	serviceTestMethod2EndpointMiddleware         []endpoint.Middleware
	serviceTestMethodOptionalsClientOption       []jsonrpc.ClientOption
	serviceTestMethodOptionalsEndpointMiddleware []endpoint.Middleware
	genericClientOption                          []jsonrpc.ClientOption
	genericEndpointMiddleware                    []endpoint.Middleware
}

func GenericClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.genericClientOption = opt }
}

func GenericClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.genericEndpointMiddleware = opt }
}

func ServiceCreateClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.serviceCreateClientOption = opt }
}

func ServiceCreateClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.serviceCreateEndpointMiddleware = opt }
}

func ServiceDeleteClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.serviceDeleteClientOption = opt }
}

func ServiceDeleteClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.serviceDeleteEndpointMiddleware = opt }
}

func ServiceGetClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.serviceGetClientOption = opt }
}

func ServiceGetClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.serviceGetEndpointMiddleware = opt }
}

func ServiceGetAllClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.serviceGetAllClientOption = opt }
}

func ServiceGetAllClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.serviceGetAllEndpointMiddleware = opt }
}

func ServiceTestMethodClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.serviceTestMethodClientOption = opt }
}

func ServiceTestMethodClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.serviceTestMethodEndpointMiddleware = opt }
}

func ServiceTestMethod2ClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.serviceTestMethod2ClientOption = opt }
}

func ServiceTestMethod2ClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.serviceTestMethod2EndpointMiddleware = opt }
}

func ServiceTestMethodOptionalsClientOptions(opt ...jsonrpc.ClientOption) ClientOption {
	return func(c *clientOpts) { c.serviceTestMethodOptionalsClientOption = opt }
}

func ServiceTestMethodOptionalsClientEndpointMiddlewares(opt ...endpoint.Middleware) ClientOption {
	return func(c *clientOpts) { c.serviceTestMethodOptionalsEndpointMiddleware = opt }
}

type clientService struct {
	serviceCreateEndpoint              endpoint.Endpoint
	serviceDeleteEndpoint              endpoint.Endpoint
	serviceGetEndpoint                 endpoint.Endpoint
	serviceGetAllEndpoint              endpoint.Endpoint
	serviceTestMethodEndpoint          endpoint.Endpoint
	serviceTestMethod2Endpoint         endpoint.Endpoint
	serviceTestMethodOptionalsEndpoint endpoint.Endpoint
}

func (c *clientService) Create(ctx context.Context, newData Data, name string, data []byte) error {
	_, err := c.serviceCreateEndpoint(ctx, CreateRequest{NewData: newData, Name: name, Data: data})
	if err != nil {
		return err
	}
	return nil
}

func (c *clientService) Delete(ctx context.Context, id uint) (string, string, error) {
	resp, err := c.serviceDeleteEndpoint(ctx, DeleteRequest{Id: id})
	if err != nil {
		return "", "", err
	}
	response := resp.(DeleteResponse)
	return response.A, response.B, nil
}

func (c *clientService) Get(ctx context.Context, id uuid.UUID, name string, fname string, price float32, n int, b int, cc int) (User, error) {
	resp, err := c.serviceGetEndpoint(ctx, GetRequest{Id: id, Name: name, Fname: fname, Price: price, N: n, B: b, Cc: cc})
	if err != nil {
		return User{}, err
	}
	response := resp.(User)
	return response, nil
}

func (c *clientService) GetAll(ctx context.Context, members Members) ([]*User, error) {
	resp, err := c.serviceGetAllEndpoint(ctx, GetAllRequest{Members: members})
	if err != nil {
		return nil, err
	}
	response := resp.([]*User)
	return response, nil
}

func (c *clientService) TestMethod(data map[string]interface{}, ss interface{}) (map[string]map[int][]string, error) {
	resp, err := c.serviceTestMethodEndpoint(context.Background(), TestMethodRequest{Data: data, Ss: ss})
	if err != nil {
		return nil, err
	}
	response := resp.(map[string]map[int][]string)
	return response, nil
}

func (c *clientService) TestMethod2(ctx context.Context, ns string, utype string, user string, restype string, resource string, permission string) error {
	_, err := c.serviceTestMethod2Endpoint(ctx, TestMethod2Request{Ns: ns, Utype: utype, User: user, Restype: restype, Resource: resource, Permission: permission})
	if err != nil {
		return err
	}
	return nil
}

func (c *clientService) TestMethodOptionals(ctx context.Context, ns string, options ...OptionService) error {
	_, err := c.serviceTestMethodOptionalsEndpoint(ctx, TestMethodOptionalsRequest{Ns: ns, Options: options})
	if err != nil {
		return err
	}
	return nil
}
