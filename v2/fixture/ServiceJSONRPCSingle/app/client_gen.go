//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"
	"encoding/json"
	"fmt"
	"net"
	"net/url"
	"strings"

	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
	"github.com/pquerna/ffjson/ffjson"
)

// Deprecated
func NewClientJSONRPC(tgt string, options ...ClientOption) (InterfaceB, error) {
	return NewClientJSONRPCService(tgt, options...)
}
func NewClientJSONRPCService(tgt string, options ...ClientOption) (InterfaceB, error) {
	opts := &clientOpts{}
	c := &clientService{}
	for _, o := range options {
		o(opts)
	}
	if strings.HasPrefix(tgt, "[") {
		host, port, err := net.SplitHostPort(tgt)
		if err != nil {
			return nil, err
		}
		tgt = host + ":" + port
	}
	u, err := url.Parse(tgt)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		u.Scheme = "https"
	}
	opts.serviceCreateClientOption = append(
		opts.serviceCreateClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(CreateRequest)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as CreateRequest, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, serviceCreateErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			return nil, nil
		}),
	)
	c.serviceCreateEndpoint = jsonrpc.NewClient(
		u,
		"service.serviceCreate",
		append(opts.genericClientOption, opts.serviceCreateClientOption...)...,
	).Endpoint()
	c.serviceCreateEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceCreateEndpointMiddleware...))(c.serviceCreateEndpoint)
	opts.serviceDeleteClientOption = append(
		opts.serviceDeleteClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(DeleteRequest)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as DeleteRequest, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, serviceDeleteErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp DeleteResponse
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to DeleteResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.serviceDeleteEndpoint = jsonrpc.NewClient(
		u,
		"service.serviceDelete",
		append(opts.genericClientOption, opts.serviceDeleteClientOption...)...,
	).Endpoint()
	c.serviceDeleteEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceDeleteEndpointMiddleware...))(c.serviceDeleteEndpoint)
	opts.serviceGetClientOption = append(
		opts.serviceGetClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(GetRequest)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as GetRequest, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, serviceGetErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp User
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to GetResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.serviceGetEndpoint = jsonrpc.NewClient(
		u,
		"service.serviceGet",
		append(opts.genericClientOption, opts.serviceGetClientOption...)...,
	).Endpoint()
	c.serviceGetEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceGetEndpointMiddleware...))(c.serviceGetEndpoint)
	opts.serviceGetAllClientOption = append(
		opts.serviceGetAllClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(GetAllRequest)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as GetAllRequest, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, serviceGetAllErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp []*User
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to GetAllResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.serviceGetAllEndpoint = jsonrpc.NewClient(
		u,
		"service.serviceGetAll",
		append(opts.genericClientOption, opts.serviceGetAllClientOption...)...,
	).Endpoint()
	c.serviceGetAllEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceGetAllEndpointMiddleware...))(c.serviceGetAllEndpoint)
	opts.serviceTestMethodClientOption = append(
		opts.serviceTestMethodClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(TestMethodRequest)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as TestMethodRequest, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, serviceTestMethodErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			var resp map[string]map[int][]string
			err := ffjson.Unmarshal(response.Result, &resp)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to TestMethodResponse: %s", err)
			}
			return resp, nil
		}),
	)
	c.serviceTestMethodEndpoint = jsonrpc.NewClient(
		u,
		"service.serviceTestMethod",
		append(opts.genericClientOption, opts.serviceTestMethodClientOption...)...,
	).Endpoint()
	c.serviceTestMethodEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceTestMethodEndpointMiddleware...))(c.serviceTestMethodEndpoint)
	opts.serviceTestMethod2ClientOption = append(
		opts.serviceTestMethod2ClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(TestMethod2Request)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as TestMethod2Request, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, serviceTestMethod2ErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			return nil, nil
		}),
	)
	c.serviceTestMethod2Endpoint = jsonrpc.NewClient(
		u,
		"service.serviceTestMethod2",
		append(opts.genericClientOption, opts.serviceTestMethod2ClientOption...)...,
	).Endpoint()
	c.serviceTestMethod2Endpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceTestMethod2EndpointMiddleware...))(c.serviceTestMethod2Endpoint)
	opts.serviceTestMethodOptionalsClientOption = append(
		opts.serviceTestMethodOptionalsClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(TestMethodOptionalsRequest)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as TestMethodOptionalsRequest, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, serviceTestMethodOptionalsErrorDecode(response.Error.Code, response.Error.Message, response.Error.Data)
			}
			return nil, nil
		}),
	)
	c.serviceTestMethodOptionalsEndpoint = jsonrpc.NewClient(
		u,
		"service.serviceTestMethodOptionals",
		append(opts.genericClientOption, opts.serviceTestMethodOptionalsClientOption...)...,
	).Endpoint()
	c.serviceTestMethodOptionalsEndpoint = middlewareChain(append(opts.genericEndpointMiddleware, opts.serviceTestMethodOptionalsEndpointMiddleware...))(c.serviceTestMethodOptionalsEndpoint)
	return c, nil
}
