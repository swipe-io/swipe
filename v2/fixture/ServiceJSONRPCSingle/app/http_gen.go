//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"github.com/go-kit/kit/endpoint"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
)

type httpError struct {
	code    int
	data    interface{}
	message string
}

func (e *httpError) Error() string {
	return e.message
}
func (e *httpError) StatusCode() int {
	return e.code
}
func (e *httpError) ErrorData() interface{} {
	return e.data
}
func (e *httpError) SetErrorData(data interface{}) {
	e.data = data
}
func (e *httpError) SetErrorMessage(message string) {
	e.message = message
}
func serviceCreateErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	case -32001:
		err = ErrUnauthorized{}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func serviceDeleteErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func serviceGetErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func serviceGetAllErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func serviceTestMethodErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func serviceTestMethod2ErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func serviceTestMethodOptionalsErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func middlewareChain(middlewares []endpoint.Middleware) endpoint.Middleware {
	return func(next endpoint.Endpoint) endpoint.Endpoint {
		if len(middlewares) == 0 {
			return next
		}
		outer := middlewares[0]
		others := middlewares[1:]
		for i := len(others) - 1; i >= 0; i-- {
			next = others[i](next)
		}
		return outer(next)
	}
}
func GenericServerOptions(v ...jsonrpc.ServerOption) ServerOption {
	return func(o *serverOpts) { o.genericServerOption = v }
}

func GenericServerEndpointMiddlewares(v ...endpoint.Middleware) ServerOption {
	return func(o *serverOpts) { o.genericEndpointMiddleware = v }
}

type ServerOption func(*serverOpts)
type serverOpts struct {
	genericServerOption                          []jsonrpc.ServerOption
	genericEndpointMiddleware                    []endpoint.Middleware
	serviceCreateServerOption                    []jsonrpc.ServerOption
	serviceCreateEndpointMiddleware              []endpoint.Middleware
	serviceDeleteServerOption                    []jsonrpc.ServerOption
	serviceDeleteEndpointMiddleware              []endpoint.Middleware
	serviceGetServerOption                       []jsonrpc.ServerOption
	serviceGetEndpointMiddleware                 []endpoint.Middleware
	serviceGetAllServerOption                    []jsonrpc.ServerOption
	serviceGetAllEndpointMiddleware              []endpoint.Middleware
	serviceTestMethodServerOption                []jsonrpc.ServerOption
	serviceTestMethodEndpointMiddleware          []endpoint.Middleware
	serviceTestMethod2ServerOption               []jsonrpc.ServerOption
	serviceTestMethod2EndpointMiddleware         []endpoint.Middleware
	serviceTestMethodOptionalsServerOption       []jsonrpc.ServerOption
	serviceTestMethodOptionalsEndpointMiddleware []endpoint.Middleware
}

func ServiceCreateServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.serviceCreateServerOption = opt }
}

func ServiceCreateServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.serviceCreateEndpointMiddleware = opt }
}

func ServiceDeleteServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.serviceDeleteServerOption = opt }
}

func ServiceDeleteServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.serviceDeleteEndpointMiddleware = opt }
}

func ServiceGetServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.serviceGetServerOption = opt }
}

func ServiceGetServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.serviceGetEndpointMiddleware = opt }
}

func ServiceGetAllServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.serviceGetAllServerOption = opt }
}

func ServiceGetAllServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.serviceGetAllEndpointMiddleware = opt }
}

func ServiceTestMethodServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.serviceTestMethodServerOption = opt }
}

func ServiceTestMethodServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.serviceTestMethodEndpointMiddleware = opt }
}

func ServiceTestMethod2ServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.serviceTestMethod2ServerOption = opt }
}

func ServiceTestMethod2ServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.serviceTestMethod2EndpointMiddleware = opt }
}

func ServiceTestMethodOptionalsServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.serviceTestMethodOptionalsServerOption = opt }
}

func ServiceTestMethodOptionalsServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.serviceTestMethodOptionalsEndpointMiddleware = opt }
}
