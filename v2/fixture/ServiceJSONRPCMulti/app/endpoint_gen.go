//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

func MakeATestMethodEndpoint(s InterfaceA) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		s.TestMethod()
		return nil, nil
	}

}

func MakeBCreateEndpoint(s InterfaceB) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(BCreateCreateRequest)
		err := s.Create(ctx, req.NewData, req.Name, req.Data)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}

}

func MakeBDeleteEndpoint(s InterfaceB) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(BDeleteDeleteRequest)
		a, b, err := s.Delete(ctx, req.Id)
		if err != nil {
			return nil, err
		}
		return BDeleteDeleteResponse{A: a, B: b}, nil
	}

}

func MakeBGetEndpoint(s InterfaceB) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(BGetGetRequest)
		result, err := s.Get(ctx, req.Id, req.Name, req.Fname, req.Price, req.N, req.B, req.Cc)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func MakeBGetAllEndpoint(s InterfaceB) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(BGetAllGetAllRequest)
		result, err := s.GetAll(ctx, req.Members)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func MakeBTestMethodEndpoint(s InterfaceB) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(BTestMethodTestMethodRequest)
		result, err := s.TestMethod(req.Data, req.Ss)
		if err != nil {
			return nil, err
		}
		return result, nil
	}

}

func MakeBTestMethod2Endpoint(s InterfaceB) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(BTestMethod2TestMethod2Request)
		err := s.TestMethod2(ctx, req.Ns, req.Utype, req.User, req.Restype, req.Resource, req.Permission)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}

}

type AEndpointSet struct {
	TestMethodEndpoint endpoint.Endpoint
}

func MakeAEndpointSet(svc InterfaceA) AEndpointSet {
	return AEndpointSet{
		TestMethodEndpoint: MakeATestMethodEndpoint(svc),
	}
}

type BEndpointSet struct {
	CreateEndpoint      endpoint.Endpoint
	DeleteEndpoint      endpoint.Endpoint
	GetEndpoint         endpoint.Endpoint
	GetAllEndpoint      endpoint.Endpoint
	TestMethodEndpoint  endpoint.Endpoint
	TestMethod2Endpoint endpoint.Endpoint
}

func MakeBEndpointSet(svc InterfaceB) BEndpointSet {
	return BEndpointSet{
		CreateEndpoint:      MakeBCreateEndpoint(svc),
		DeleteEndpoint:      MakeBDeleteEndpoint(svc),
		GetEndpoint:         MakeBGetEndpoint(svc),
		GetAllEndpoint:      MakeBGetAllEndpoint(svc),
		TestMethodEndpoint:  MakeBTestMethodEndpoint(svc),
		TestMethod2Endpoint: MakeBTestMethod2Endpoint(svc),
	}
}

type BCreateCreateRequest struct {
	NewData Data   `json:"newData"`
	Name    string `json:"name"`
	Data    []byte `json:"data"`
}
type BDeleteDeleteRequest struct {
	Id uint `json:"id"`
}
type BDeleteDeleteResponse struct {
	A string `json:"a"`
	B string `json:"b"`
}
type BGetGetRequest struct {
	Id    int     `json:"id"`
	Name  string  `json:"name"`
	Fname string  `json:"fname"`
	Price float32 `json:"price"`
	N     int     `json:"n"`
	B     int     `json:"b"`
	Cc    int     `json:"cc"`
}
type BGetAllGetAllRequest struct {
	Members Members `json:"members"`
}
type BTestMethodTestMethodRequest struct {
	Data map[string]interface{} `json:"data"`
	Ss   interface{}            `json:"ss"`
}
type BTestMethod2TestMethod2Request struct {
	Ns         string `json:"ns"`
	Utype      string `json:"utype"`
	User       string `json:"user"`
	Restype    string `json:"restype"`
	Resource   string `json:"resource"`
	Permission string `json:"permission"`
}
