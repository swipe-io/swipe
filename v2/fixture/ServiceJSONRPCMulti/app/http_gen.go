//+build !swipe

// Code generated by Swipe v2.0.0-rc4. DO NOT EDIT.

package app

import (
	"github.com/go-kit/kit/endpoint"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
)

type httpError struct {
	code    int
	data    interface{}
	message string
}

func (e *httpError) Error() string {
	return e.message
}
func (e *httpError) StatusCode() int {
	return e.code
}
func (e *httpError) ErrorData() interface{} {
	return e.data
}
func (e *httpError) SetErrorData(data interface{}) {
	e.data = data
}
func (e *httpError) SetErrorMessage(message string) {
	e.message = message
}
func aTestMethodErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func bCreateErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	case -32001:
		err = ErrUnauthorized{}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func bDeleteErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func bGetErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func bGetAllErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func bTestMethodErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func bTestMethod2ErrorDecode(code int, message string, data interface{}) (err error) {
	switch code {
	default:
		err = &httpError{code: code}
	}
	if err, ok := err.(interface{ SetErrorData(data interface{}) }); ok {
		err.SetErrorData(data)
	}
	if err, ok := err.(interface{ SetErrorMessage(message string) }); ok {
		err.SetErrorMessage(message)
	}
	return
}

func middlewareChain(middlewares []endpoint.Middleware) endpoint.Middleware {
	return func(next endpoint.Endpoint) endpoint.Endpoint {
		if len(middlewares) == 0 {
			return next
		}
		outer := middlewares[0]
		others := middlewares[1:]
		for i := len(others) - 1; i >= 0; i-- {
			next = others[i](next)
		}
		return outer(next)
	}
}
func GenericServerOptions(v ...jsonrpc.ServerOption) ServerOption {
	return func(o *serverOpts) { o.genericServerOption = v }
}

func GenericServerEndpointMiddlewares(v ...endpoint.Middleware) ServerOption {
	return func(o *serverOpts) { o.genericEndpointMiddleware = v }
}

type ServerOption func(*serverOpts)
type serverOpts struct {
	genericServerOption            []jsonrpc.ServerOption
	genericEndpointMiddleware      []endpoint.Middleware
	aTestMethodServerOption        []jsonrpc.ServerOption
	aTestMethodEndpointMiddleware  []endpoint.Middleware
	bCreateServerOption            []jsonrpc.ServerOption
	bCreateEndpointMiddleware      []endpoint.Middleware
	bDeleteServerOption            []jsonrpc.ServerOption
	bDeleteEndpointMiddleware      []endpoint.Middleware
	bGetServerOption               []jsonrpc.ServerOption
	bGetEndpointMiddleware         []endpoint.Middleware
	bGetAllServerOption            []jsonrpc.ServerOption
	bGetAllEndpointMiddleware      []endpoint.Middleware
	bTestMethodServerOption        []jsonrpc.ServerOption
	bTestMethodEndpointMiddleware  []endpoint.Middleware
	bTestMethod2ServerOption       []jsonrpc.ServerOption
	bTestMethod2EndpointMiddleware []endpoint.Middleware
}

func ATestMethodServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.aTestMethodServerOption = opt }
}

func ATestMethodServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.aTestMethodEndpointMiddleware = opt }
}

func BCreateServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.bCreateServerOption = opt }
}

func BCreateServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.bCreateEndpointMiddleware = opt }
}

func BDeleteServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.bDeleteServerOption = opt }
}

func BDeleteServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.bDeleteEndpointMiddleware = opt }
}

func BGetServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.bGetServerOption = opt }
}

func BGetServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.bGetEndpointMiddleware = opt }
}

func BGetAllServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.bGetAllServerOption = opt }
}

func BGetAllServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.bGetAllEndpointMiddleware = opt }
}

func BTestMethodServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.bTestMethodServerOption = opt }
}

func BTestMethodServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.bTestMethodEndpointMiddleware = opt }
}

func BTestMethod2ServerOptions(opt ...jsonrpc.ServerOption) ServerOption {
	return func(c *serverOpts) { c.bTestMethod2ServerOption = opt }
}

func BTestMethod2ServerEndpointMiddlewares(opt ...endpoint.Middleware) ServerOption {
	return func(c *serverOpts) { c.bTestMethod2EndpointMiddleware = opt }
}
