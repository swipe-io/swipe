package frame

import (
	"bytes"
	"fmt"
	"go/format"
)

type GolangFrame struct {
	imports      []string
	pkgName      string
	version      string
	useDoNotEdit bool
}

func (f *GolangFrame) Frame(data []byte) ([]byte, error) {
	var buf bytes.Buffer
	if f.useDoNotEdit {
		buf.WriteString("// Code generated by Swipe " + f.version + ". DO NOT EDIT.\n\n")
	}
	buf.WriteString("package ")
	buf.WriteString(f.pkgName)
	buf.WriteString("\n\n")

	if len(f.imports) > 0 {
		buf.WriteString("import (\n")
		for _, imp := range f.imports {
			_, _ = fmt.Fprint(&buf, imp)
		}
		buf.WriteString(")\n\n")
	}
	buf.Write(data)

	fmtData, err := format.Source(buf.Bytes())
	if err != nil {
		sourceBuf := bytes.NewBuffer(nil)
		for i, line := range bytes.Split(buf.Bytes(), []byte("\n")) {
			sourceBuf.WriteString(fmt.Sprintf("%d  ", i))
			sourceBuf.Write(line)
			sourceBuf.WriteByte('\n')
		}
		return nil, fmt.Errorf("error: %w\n ***\n%s\n***\n\n", err, sourceBuf.String())
	}
	return fmtData, nil
}

func NewGolangFrame(imports []string, version, pkgName string, useDoNotEdit bool) *GolangFrame {
	return &GolangFrame{imports: imports, version: version, pkgName: pkgName, useDoNotEdit: useDoNotEdit}
}
